// Code generated by protoc-gen-go.
// source: log_it.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	log_it.proto

It has these top-level messages:
	LogData
	LogSuccess
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type LogData struct {
	Severity int32  `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Data     string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *LogData) Reset()                    { *m = LogData{} }
func (m *LogData) String() string            { return proto1.CompactTextString(m) }
func (*LogData) ProtoMessage()               {}
func (*LogData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogData) GetSeverity() int32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *LogData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type LogSuccess struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *LogSuccess) Reset()                    { *m = LogSuccess{} }
func (m *LogSuccess) String() string            { return proto1.CompactTextString(m) }
func (*LogSuccess) ProtoMessage()               {}
func (*LogSuccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogSuccess) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LogSuccess) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto1.RegisterType((*LogData)(nil), "proto.LogData")
	proto1.RegisterType((*LogSuccess)(nil), "proto.LogSuccess")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogIt service

type LogItClient interface {
	// Repond to message - no loggin -just responde with success
	IAmAlive(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*LogSuccess, error)
	// just log some data
	LogMessage(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*LogSuccess, error)
}

type logItClient struct {
	cc *grpc.ClientConn
}

func NewLogItClient(cc *grpc.ClientConn) LogItClient {
	return &logItClient{cc}
}

func (c *logItClient) IAmAlive(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*LogSuccess, error) {
	out := new(LogSuccess)
	err := grpc.Invoke(ctx, "/proto.LogIt/IAmAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logItClient) LogMessage(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*LogSuccess, error) {
	out := new(LogSuccess)
	err := grpc.Invoke(ctx, "/proto.LogIt/LogMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogIt service

type LogItServer interface {
	// Repond to message - no loggin -just responde with success
	IAmAlive(context.Context, *LogData) (*LogSuccess, error)
	// just log some data
	LogMessage(context.Context, *LogData) (*LogSuccess, error)
}

func RegisterLogItServer(s *grpc.Server, srv LogItServer) {
	s.RegisterService(&_LogIt_serviceDesc, srv)
}

func _LogIt_IAmAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogItServer).IAmAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogIt/IAmAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogItServer).IAmAlive(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIt_LogMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogItServer).LogMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogIt/LogMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogItServer).LogMessage(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogIt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogIt",
	HandlerType: (*LogItServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IAmAlive",
			Handler:    _LogIt_IAmAlive_Handler,
		},
		{
			MethodName: "LogMessage",
			Handler:    _LogIt_LogMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_it.proto",
}

func init() { proto1.RegisterFile("log_it.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x8e, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x46, 0x5d, 0x35, 0xb5, 0x1d, 0x44, 0x74, 0x0e, 0xa5, 0xf4, 0x54, 0x72, 0x90, 0x9e, 0x56,
	0x54, 0x10, 0x3c, 0xb6, 0x78, 0x29, 0x44, 0x28, 0xf1, 0x07, 0xc8, 0x1a, 0x97, 0x61, 0x71, 0xc3,
	0x84, 0xcc, 0x34, 0xe8, 0xbf, 0x97, 0xac, 0x8b, 0x5e, 0x3d, 0xcd, 0xbc, 0xc3, 0xe3, 0x7b, 0x70,
	0x1e, 0x99, 0x5e, 0x83, 0xda, 0xae, 0x67, 0x65, 0x2c, 0xd2, 0x29, 0x1f, 0xe1, 0xac, 0x62, 0x7a,
	0x72, 0xea, 0x70, 0x09, 0x53, 0xf1, 0x83, 0xef, 0x83, 0x7e, 0x2d, 0xcc, 0xca, 0xac, 0x8b, 0xfa,
	0x97, 0x11, 0xe1, 0xf4, 0xdd, 0xa9, 0x5b, 0x1c, 0xaf, 0xcc, 0x7a, 0x56, 0xa7, 0xbf, 0x7c, 0x00,
	0xa8, 0x98, 0x5e, 0x0e, 0x4d, 0xe3, 0x45, 0x70, 0x0e, 0x13, 0x51, 0xa7, 0x07, 0x49, 0xee, 0xac,
	0xce, 0x84, 0x97, 0x70, 0xd2, 0x0a, 0x65, 0x71, 0x7c, 0xef, 0x3e, 0xa0, 0xa8, 0x98, 0x76, 0x8a,
	0x37, 0x30, 0xdd, 0x6d, 0xda, 0x4d, 0x0c, 0x83, 0xc7, 0x8b, 0x9f, 0x2c, 0x9b, 0x63, 0x96, 0x57,
	0x7f, 0x9c, 0x17, 0xca, 0x23, 0xbc, 0x4d, 0x8b, 0xcf, 0x5e, 0xc4, 0xd1, 0xff, 0x94, 0xed, 0x35,
	0xcc, 0x03, 0x5b, 0xea, 0xbb, 0xc6, 0xfa, 0x4f, 0xd7, 0x76, 0xd1, 0x8b, 0x8d, 0x4c, 0x41, 0xb7,
	0x90, 0x22, 0xf6, 0xa3, 0xb2, 0x37, 0x6f, 0x93, 0xe4, 0xde, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xb4, 0xcb, 0x76, 0x62, 0x25, 0x01, 0x00, 0x00,
}
